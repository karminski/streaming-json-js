{"version":3,"file":"index.mjs","sources":["../src/index.js"],"sourcesContent":["// token const\nconst TOKEN_EOF = 0; // end-of-file\nconst TOKEN_IGNORED = 1; // \\t', '\\n', '\\v', '\\f', '\\r', ' '\nconst TOKEN_LEFT_BRACKET = 2; // [\nconst TOKEN_RIGHT_BRACKET = 3; // ]\nconst TOKEN_LEFT_BRACE = 4; // {\nconst TOKEN_RIGHT_BRACE = 5; // }\nconst TOKEN_COLON = 6; // :\nconst TOKEN_DOT = 7; // .\nconst TOKEN_COMMA = 8; // ,\nconst TOKEN_QUOTE = 9; // \"\nconst TOKEN_ESCAPE_CHARACTER = 10; // \\\nconst TOKEN_SLASH = 11; // /\nconst TOKEN_NEGATIVE = 12; // -\nconst TOKEN_NULL = 13; // null\nconst TOKEN_TRUE = 14; // true\nconst TOKEN_FALSE = 15; // false\nconst TOKEN_ALPHABET_LOWERCASE_A = 16; // a\nconst TOKEN_ALPHABET_LOWERCASE_B = 17; // b\nconst TOKEN_ALPHABET_LOWERCASE_C = 18; // c\nconst TOKEN_ALPHABET_LOWERCASE_D = 19; // d\nconst TOKEN_ALPHABET_LOWERCASE_E = 20; // e\nconst TOKEN_ALPHABET_LOWERCASE_F = 21; // f\nconst TOKEN_ALPHABET_LOWERCASE_L = 22; // l\nconst TOKEN_ALPHABET_LOWERCASE_N = 23; // n\nconst TOKEN_ALPHABET_LOWERCASE_R = 24; // r\nconst TOKEN_ALPHABET_LOWERCASE_S = 25; // s\nconst TOKEN_ALPHABET_LOWERCASE_T = 26; // t\nconst TOKEN_ALPHABET_LOWERCASE_U = 27; // u\nconst TOKEN_ALPHABET_UPPERCASE_A = 28; // A\nconst TOKEN_ALPHABET_UPPERCASE_B = 29; // B\nconst TOKEN_ALPHABET_UPPERCASE_C = 30; // C\nconst TOKEN_ALPHABET_UPPERCASE_D = 31; // D\nconst TOKEN_ALPHABET_UPPERCASE_E = 32; // E\nconst TOKEN_ALPHABET_UPPERCASE_F = 33; // F\nconst TOKEN_NUMBER = 34; // number\nconst TOKEN_NUMBER_0 = 35; // 0\nconst TOKEN_NUMBER_1 = 36; // 1\nconst TOKEN_NUMBER_2 = 37; // 2\nconst TOKEN_NUMBER_3 = 38; // 3\nconst TOKEN_NUMBER_4 = 39; // 4\nconst TOKEN_NUMBER_5 = 40; // 5\nconst TOKEN_NUMBER_6 = 41; // 6\nconst TOKEN_NUMBER_7 = 42; // 7\nconst TOKEN_NUMBER_8 = 43; // 8\nconst TOKEN_NUMBER_9 = 44; // 9\nconst TOKEN_OTHERS = 45; // anything else in json\n\n// token symbol const\nconst TOKEN_EOF_SYMBOL = 'EOF';\nconst TOKEN_LEFT_BRACKET_SYMBOL = '[';\nconst TOKEN_RIGHT_BRACKET_SYMBOL = ']';\nconst TOKEN_LEFT_BRACE_SYMBOL = '{';\nconst TOKEN_RIGHT_BRACE_SYMBOL = '}';\nconst TOKEN_COLON_SYMBOL = ':';\nconst TOKEN_DOT_SYMBOL = '.';\nconst TOKEN_COMMA_SYMBOL = ',';\nconst TOKEN_QUOTE_SYMBOL = '\"';\nconst TOKEN_ESCAPE_CHARACTER_SYMBOL = '\\\\';\nconst TOKEN_SLASH_SYMBOL = '/';\nconst TOKEN_NEGATIVE_SYMBOL = '-';\nconst TOKEN_NULL_SYMBOL = 'null';\nconst TOKEN_TRUE_SYMBOL = 'true';\nconst TOKEN_FALSE_SYMBOL = 'false';\nconst TOKEN_ALPHABET_LOWERCASE_A_SYMBOL = 'a';\nconst TOKEN_ALPHABET_LOWERCASE_B_SYMBOL = 'b';\nconst TOKEN_ALPHABET_LOWERCASE_C_SYMBOL = 'c';\nconst TOKEN_ALPHABET_LOWERCASE_D_SYMBOL = 'd';\nconst TOKEN_ALPHABET_LOWERCASE_E_SYMBOL = 'e';\nconst TOKEN_ALPHABET_LOWERCASE_F_SYMBOL = 'f';\nconst TOKEN_ALPHABET_LOWERCASE_L_SYMBOL = 'l';\nconst TOKEN_ALPHABET_LOWERCASE_N_SYMBOL = 'n';\nconst TOKEN_ALPHABET_LOWERCASE_R_SYMBOL = 'r';\nconst TOKEN_ALPHABET_LOWERCASE_S_SYMBOL = 's';\nconst TOKEN_ALPHABET_LOWERCASE_T_SYMBOL = 't';\nconst TOKEN_ALPHABET_LOWERCASE_U_SYMBOL = 'u';\nconst TOKEN_ALPHABET_UPPERCASE_A_SYMBOL = 'A';\nconst TOKEN_ALPHABET_UPPERCASE_B_SYMBOL = 'B';\nconst TOKEN_ALPHABET_UPPERCASE_C_SYMBOL = 'C';\nconst TOKEN_ALPHABET_UPPERCASE_D_SYMBOL = 'D';\nconst TOKEN_ALPHABET_UPPERCASE_E_SYMBOL = 'E';\nconst TOKEN_ALPHABET_UPPERCASE_F_SYMBOL = 'F';\nconst TOKEN_NUMBER_0_SYMBOL = '0';\nconst TOKEN_NUMBER_1_SYMBOL = '1';\nconst TOKEN_NUMBER_2_SYMBOL = '2';\nconst TOKEN_NUMBER_3_SYMBOL = '3';\nconst TOKEN_NUMBER_4_SYMBOL = '4';\nconst TOKEN_NUMBER_5_SYMBOL = '5';\nconst TOKEN_NUMBER_6_SYMBOL = '6';\nconst TOKEN_NUMBER_7_SYMBOL = '7';\nconst TOKEN_NUMBER_8_SYMBOL = '8';\nconst TOKEN_NUMBER_9_SYMBOL = '9';\n\n// token symbol const\nconst TOKEN_SYMBOL_MAP = {\n  [TOKEN_EOF]: TOKEN_EOF_SYMBOL,\n  [TOKEN_LEFT_BRACKET]: TOKEN_LEFT_BRACKET_SYMBOL,\n  [TOKEN_RIGHT_BRACKET]: TOKEN_RIGHT_BRACKET_SYMBOL,\n  [TOKEN_LEFT_BRACE]: TOKEN_LEFT_BRACE_SYMBOL,\n  [TOKEN_RIGHT_BRACE]: TOKEN_RIGHT_BRACE_SYMBOL,\n  [TOKEN_COLON]: TOKEN_COLON_SYMBOL,\n  [TOKEN_DOT]: TOKEN_DOT_SYMBOL,\n  [TOKEN_COMMA]: TOKEN_COMMA_SYMBOL,\n  [TOKEN_QUOTE]: TOKEN_QUOTE_SYMBOL,\n  [TOKEN_ESCAPE_CHARACTER]: TOKEN_ESCAPE_CHARACTER_SYMBOL,\n  [TOKEN_SLASH]: TOKEN_SLASH_SYMBOL,\n  [TOKEN_NEGATIVE]: TOKEN_NEGATIVE_SYMBOL,\n  [TOKEN_NULL]: TOKEN_NULL_SYMBOL,\n  [TOKEN_TRUE]: TOKEN_TRUE_SYMBOL,\n  [TOKEN_FALSE]: TOKEN_FALSE_SYMBOL,\n  [TOKEN_ALPHABET_LOWERCASE_A]: TOKEN_ALPHABET_LOWERCASE_A_SYMBOL,\n  [TOKEN_ALPHABET_LOWERCASE_B]: TOKEN_ALPHABET_LOWERCASE_B_SYMBOL,\n  [TOKEN_ALPHABET_LOWERCASE_C]: TOKEN_ALPHABET_LOWERCASE_C_SYMBOL,\n  [TOKEN_ALPHABET_LOWERCASE_D]: TOKEN_ALPHABET_LOWERCASE_D_SYMBOL,\n  [TOKEN_ALPHABET_LOWERCASE_E]: TOKEN_ALPHABET_LOWERCASE_E_SYMBOL,\n  [TOKEN_ALPHABET_LOWERCASE_F]: TOKEN_ALPHABET_LOWERCASE_F_SYMBOL,\n  [TOKEN_ALPHABET_LOWERCASE_L]: TOKEN_ALPHABET_LOWERCASE_L_SYMBOL,\n  [TOKEN_ALPHABET_LOWERCASE_N]: TOKEN_ALPHABET_LOWERCASE_N_SYMBOL,\n  [TOKEN_ALPHABET_LOWERCASE_R]: TOKEN_ALPHABET_LOWERCASE_R_SYMBOL,\n  [TOKEN_ALPHABET_LOWERCASE_S]: TOKEN_ALPHABET_LOWERCASE_S_SYMBOL,\n  [TOKEN_ALPHABET_LOWERCASE_T]: TOKEN_ALPHABET_LOWERCASE_T_SYMBOL,\n  [TOKEN_ALPHABET_LOWERCASE_U]: TOKEN_ALPHABET_LOWERCASE_U_SYMBOL,\n  [TOKEN_ALPHABET_UPPERCASE_A]: TOKEN_ALPHABET_UPPERCASE_A_SYMBOL,\n  [TOKEN_ALPHABET_UPPERCASE_B]: TOKEN_ALPHABET_UPPERCASE_B_SYMBOL,\n  [TOKEN_ALPHABET_UPPERCASE_C]: TOKEN_ALPHABET_UPPERCASE_C_SYMBOL,\n  [TOKEN_ALPHABET_UPPERCASE_D]: TOKEN_ALPHABET_UPPERCASE_D_SYMBOL,\n  [TOKEN_ALPHABET_UPPERCASE_E]: TOKEN_ALPHABET_UPPERCASE_E_SYMBOL,\n  [TOKEN_ALPHABET_UPPERCASE_F]: TOKEN_ALPHABET_UPPERCASE_F_SYMBOL,\n  [TOKEN_NUMBER_0]: TOKEN_NUMBER_0_SYMBOL,\n  [TOKEN_NUMBER_1]: TOKEN_NUMBER_1_SYMBOL,\n  [TOKEN_NUMBER_2]: TOKEN_NUMBER_2_SYMBOL,\n  [TOKEN_NUMBER_3]: TOKEN_NUMBER_3_SYMBOL,\n  [TOKEN_NUMBER_4]: TOKEN_NUMBER_4_SYMBOL,\n  [TOKEN_NUMBER_5]: TOKEN_NUMBER_5_SYMBOL,\n  [TOKEN_NUMBER_6]: TOKEN_NUMBER_6_SYMBOL,\n  [TOKEN_NUMBER_7]: TOKEN_NUMBER_7_SYMBOL,\n  [TOKEN_NUMBER_8]: TOKEN_NUMBER_8_SYMBOL,\n  [TOKEN_NUMBER_9]: TOKEN_NUMBER_9_SYMBOL,\n};\n\n// helper method check if token is in ignore token\nfunction isIgnoreToken(c) {\n  switch (c) {\n    case '\\t':\n    case '\\n':\n    case '\\v':\n    case '\\f':\n    case '\\r':\n    case ' ':\n      return true;\n  }\n  return false;\n}\n\n// get array real length\nfunction arrayLength(a) {\n  if (!a) {\n    return 0;\n  }\n  return Object.keys(a).filter(function (el) {\n    return !(+el % 1) && +el >= 0 && +el < Math.pow(2, 32);\n  }).length;\n}\n\n// helper method match stack with tokens\nfunction matchStack(stack, tokens) {\n  let pointer = arrayLength(stack);\n  let tokensLeft = arrayLength(tokens);\n\n  for (;;) {\n    tokensLeft--;\n    pointer--;\n\n    if (tokensLeft < 0) {\n      break;\n    }\n\n    if (pointer < 0) {\n      return false;\n    }\n\n    if (stack[pointer] !== tokens[tokensLeft]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\n// main lexer\nclass Lexer {\n  constructor() {\n    this.JSONContent = ''; // input JSON content\n    this.PaddingContent = ''; // padding content for ignored characters and escape characters, etc.\n    this.JSONSegment = ''; // appended JSON segment by the AppendString() method.\n    this.TokenStack = []; // token stack for input JSON\n    this.MirrorTokenStack = []; // token stack for auto-completed tokens\n  }\n\n  // Get token on the stack top\n  getTopTokenOnStack() {\n    if (this.TokenStack.length === 0) {\n      return TOKEN_EOF;\n    }\n    return this.TokenStack[this.TokenStack.length - 1];\n  }\n\n  // Get token on the mirror stack top\n  getTopTokenOnMirrorStack() {\n    if (this.MirrorTokenStack.length === 0) {\n      return TOKEN_EOF;\n    }\n    return this.MirrorTokenStack[this.MirrorTokenStack.length - 1];\n  }\n\n  // Pop token on the stack top\n  popTokenStack() {\n    if (this.TokenStack.length === 0) {\n      return TOKEN_EOF;\n    }\n    return this.TokenStack.pop();\n  }\n\n  // Pop token on the mirror stack top\n  popMirrorTokenStack() {\n    if (this.MirrorTokenStack.length === 0) {\n      return TOKEN_EOF;\n    }\n    return this.MirrorTokenStack.pop();\n  }\n\n  // Push token into the stack\n  pushTokenStack(token) {\n    this.TokenStack.push(token);\n  }\n\n  // Push token into the mirror stack\n  pushMirrorTokenStack(token) {\n    this.MirrorTokenStack.push(token);\n  }\n\n  // Convert mirror stack token into string\n  dumpMirrorTokenStackToString() {\n    var ret = '';\n    this.MirrorTokenStack.slice()\n      .reverse()\n      .forEach(function (item) {\n        ret += TOKEN_SYMBOL_MAP[item];\n      });\n    return ret;\n  }\n\n  // Skip JSON segment by length n\n  skipJSONSegment(n) {\n    this.JSONSegment = this.JSONSegment.substring(n);\n  }\n\n  // Push negative symbol `-` into JSON content\n  pushNegativeIntoJSONContent() {\n    this.JSONContent += TOKEN_NEGATIVE_SYMBOL;\n  }\n\n  // Push byte into JSON content by given\n  pushByteIntoPaddingContent(s) {\n    this.PaddingContent += s;\n  }\n\n  // Append padding content into JSON content\n  appendPaddingContentToJSONContent() {\n    this.JSONContent += this.PaddingContent;\n  }\n\n  // Check if padding content is empty\n  havePaddingContent() {\n    return this.PaddingContent.length > 0;\n  }\n\n  // Set padding content to empty\n  cleanPaddingContent() {\n    this.PaddingContent = '';\n  }\n\n  // check if JSON stream stopped at an object property's key start, like `{\"`\n  streamStoppedInAnObjectKeyStart() {\n    // `{`, `\"` in stack, or `,`, `\"` in stack\n    const case1 = [TOKEN_LEFT_BRACE, TOKEN_QUOTE];\n    const case2 = [TOKEN_COMMA, TOKEN_QUOTE];\n    // `}` in mirror stack\n    const case3 = [TOKEN_RIGHT_BRACE];\n    return (\n      (matchStack(this.TokenStack, case1) ||\n        matchStack(this.TokenStack, case2)) &&\n      matchStack(this.MirrorTokenStack, case3)\n    );\n  }\n\n  // check if JSON stream stopped in an object property's key, like `{\"field`\n  streamStoppedInAnObjectKeyEnd() {\n    // `{`, `\"`, `\"` in stack, or `,`, `\"`, `\"` in stack\n    const case1 = [TOKEN_LEFT_BRACE, TOKEN_QUOTE, TOKEN_QUOTE];\n    const case2 = [TOKEN_COMMA, TOKEN_QUOTE, TOKEN_QUOTE];\n    // `\"`, `:`, `n`, `u`, `l`, `l`, `}` in mirror stack\n    const case3 = [\n      TOKEN_RIGHT_BRACE,\n      TOKEN_ALPHABET_LOWERCASE_L,\n      TOKEN_ALPHABET_LOWERCASE_L,\n      TOKEN_ALPHABET_LOWERCASE_U,\n      TOKEN_ALPHABET_LOWERCASE_N,\n      TOKEN_COLON,\n      TOKEN_QUOTE,\n    ];\n    return (\n      (matchStack(this.TokenStack, case1) ||\n        matchStack(this.TokenStack, case2)) &&\n      matchStack(this.MirrorTokenStack, case3)\n    );\n  }\n\n  // check if JSON stream stopped in an object property's value start, like `{\"field\": \"`\n  streamStoppedInAnObjectStringValueStart() {\n    // `:`, `\"` in stack\n    const case1 = [TOKEN_COLON, TOKEN_QUOTE];\n    // `n`, `u`, `l`, `l`, `}` in mirror stack\n    const case2 = [\n      TOKEN_RIGHT_BRACE,\n      TOKEN_ALPHABET_LOWERCASE_L,\n      TOKEN_ALPHABET_LOWERCASE_L,\n      TOKEN_ALPHABET_LOWERCASE_U,\n      TOKEN_ALPHABET_LOWERCASE_N,\n    ];\n    return (\n      matchStack(this.TokenStack, case1) &&\n      matchStack(this.MirrorTokenStack, case2)\n    );\n  }\n\n  // check if JSON stream stopped in an object property's value finish, like `{\"field\": \"value\"`\n  streamStoppedInAnObjectValueEnd() {\n    // `\"`, `}` left\n    const tokens = [TOKEN_RIGHT_BRACE, TOKEN_QUOTE];\n    return matchStack(this.MirrorTokenStack, tokens);\n  }\n\n  // check if JSON stream stopped in an object property's value start by array, like `{\"field\":[`\n  streamStoppedInAnObjectArrayValueStart() {\n    // `:`, `[` in stack\n    const case1 = [TOKEN_COLON, TOKEN_LEFT_BRACKET];\n    // `n`, `u`, `l`, `l`, `}` in mirror stack\n    const case2 = [\n      TOKEN_RIGHT_BRACE,\n      TOKEN_ALPHABET_LOWERCASE_L,\n      TOKEN_ALPHABET_LOWERCASE_L,\n      TOKEN_ALPHABET_LOWERCASE_U,\n      TOKEN_ALPHABET_LOWERCASE_N,\n    ];\n    return (\n      matchStack(this.TokenStack, case1) &&\n      matchStack(this.MirrorTokenStack, case2)\n    );\n  }\n\n  // check if JSON stream stopped in an object property's value start by object, like `{\"field\":{`\n  streamStoppedInAnObjectObjectValueStart() {\n    // `:`, `{` in stack\n    const case1 = [TOKEN_COLON, TOKEN_LEFT_BRACE];\n    // `n`, `u`, `l`, `l`, `}` in mirror stack\n    const case2 = [\n      TOKEN_RIGHT_BRACE,\n      TOKEN_ALPHABET_LOWERCASE_L,\n      TOKEN_ALPHABET_LOWERCASE_L,\n      TOKEN_ALPHABET_LOWERCASE_U,\n      TOKEN_ALPHABET_LOWERCASE_N,\n    ];\n    return (\n      matchStack(this.TokenStack, case1) &&\n      matchStack(this.MirrorTokenStack, case2)\n    );\n  }\n\n  // check if JSON stream stopped in an object property's negative number value start, like `:-`\n  streamStoppedInAnObjectNegativeNumberValueStart() {\n    // `:`, `-` in stack\n    const case1 = [TOKEN_COLON, TOKEN_NEGATIVE];\n    return matchStack(this.TokenStack, case1);\n  }\n\n  // check if JSON stream stopped in an object property's negative number value start, like `-`\n  streamStoppedInANegativeNumberValueStart() {\n    // `-` in stack\n    const case1 = [TOKEN_NEGATIVE];\n    // `0` in mirror stack\n    const case2 = [TOKEN_NUMBER_0];\n    return (\n      matchStack(this.TokenStack, case1) &&\n      matchStack(this.MirrorTokenStack, case2)\n    );\n  }\n\n  // check if JSON stream stopped in an array\n  streamStoppedInAnArray() {\n    return this.getTopTokenOnMirrorStack() === TOKEN_RIGHT_BRACKET;\n  }\n\n  // check if JSON stream stopped in an array's string value end, like `[\"value\"]`\n  streamStoppedInAnArrayStringValueEnd() {\n    // `\"`, `\"` in stack\n    const case1 = [TOKEN_QUOTE, TOKEN_QUOTE];\n    // `\"`, `]` in mirror stack\n    const case2 = [TOKEN_RIGHT_BRACKET, TOKEN_QUOTE];\n    return (\n      matchStack(this.TokenStack, case1) &&\n      matchStack(this.MirrorTokenStack, case2)\n    );\n  }\n\n  // check if JSON stream stopped in an object property's value start by array, like `{\"field\":{`\n  streamStoppedInAnObjectNullValuePlaceholderStart() {\n    // `n`, `u`, `l`, `l`, `}` in mirror stack\n    const case1 = [\n      TOKEN_RIGHT_BRACE,\n      TOKEN_ALPHABET_LOWERCASE_L,\n      TOKEN_ALPHABET_LOWERCASE_L,\n      TOKEN_ALPHABET_LOWERCASE_U,\n      TOKEN_ALPHABET_LOWERCASE_N,\n    ];\n    return matchStack(this.MirrorTokenStack, case1);\n  }\n\n  // check if JSON stream stopped in a string, like `\"\"`\n  streamStoppedInAString() {\n    return (\n      this.getTopTokenOnStack() === TOKEN_QUOTE &&\n      this.getTopTokenOnMirrorStack() === TOKEN_QUOTE\n    );\n  }\n\n  // check if JSON stream stopped in a string's unicode escape, like `\\u????`\n  streamStoppedInAnStringUnicodeEscape() {\n    // `\\`, `u` in stack\n    const case1 = [TOKEN_ESCAPE_CHARACTER, TOKEN_ALPHABET_LOWERCASE_U];\n    // `\"` in mirror stack\n    const case2 = [TOKEN_QUOTE];\n    return (\n      matchStack(this.TokenStack, case1) &&\n      matchStack(this.MirrorTokenStack, case2)\n    );\n  }\n\n  // check if JSON stream stopped in a number, like `[0-9]`\n  streamStoppedInANumber() {\n    return this.getTopTokenOnStack() === TOKEN_NUMBER;\n  }\n\n  // check if JSON stream stopped in a number first decimal place, like `.?`\n  streamStoppedInANumberDecimalPart() {\n    return this.getTopTokenOnStack() === TOKEN_DOT;\n  }\n\n  // check if JSON stream stopped in a number other decimal places (except first place), like `.[0-9]?`\n  streamStoppedInANumberDecimalPartMiddle() {\n    // `.`, TOKEN_NUMBER in stack\n    const case1 = [TOKEN_DOT, TOKEN_NUMBER];\n    return matchStack(this.TokenStack, case1);\n  }\n\n  // check if JSON stream stopped in escape character, like `\\`\n  streamStoppedWithLeadingEscapeCharacter() {\n    return this.getTopTokenOnStack() === TOKEN_ESCAPE_CHARACTER;\n  }\n\n  // lexer match JSON token method, convert JSON segment to JSON token\n  matchToken() {\n    // segment end\n    if (this.JSONSegment.length === 0) {\n      return [TOKEN_EOF, 0];\n    }\n    let tokenSymbol = this.JSONSegment.substring(0, 1);\n\n    // check if ignored token\n    if (isIgnoreToken(tokenSymbol)) {\n      this.skipJSONSegment(1);\n      return [TOKEN_IGNORED, tokenSymbol];\n    }\n\n    // match token\n    switch (tokenSymbol) {\n      case TOKEN_LEFT_BRACKET_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_LEFT_BRACKET, tokenSymbol];\n      case TOKEN_RIGHT_BRACKET_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_RIGHT_BRACKET, tokenSymbol];\n      case TOKEN_LEFT_BRACE_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_LEFT_BRACE, tokenSymbol];\n      case TOKEN_RIGHT_BRACE_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_RIGHT_BRACE, tokenSymbol];\n      case TOKEN_COLON_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_COLON, tokenSymbol];\n      case TOKEN_DOT_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_DOT, tokenSymbol];\n      case TOKEN_COMMA_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_COMMA, tokenSymbol];\n      case TOKEN_QUOTE_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_QUOTE, tokenSymbol];\n      case TOKEN_ESCAPE_CHARACTER_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_ESCAPE_CHARACTER, tokenSymbol];\n      case TOKEN_SLASH_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_SLASH, tokenSymbol];\n      case TOKEN_NEGATIVE_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_NEGATIVE, tokenSymbol];\n      case TOKEN_ALPHABET_LOWERCASE_A_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_ALPHABET_LOWERCASE_A, tokenSymbol];\n      case TOKEN_ALPHABET_LOWERCASE_B_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_ALPHABET_LOWERCASE_B, tokenSymbol];\n      case TOKEN_ALPHABET_LOWERCASE_C_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_ALPHABET_LOWERCASE_C, tokenSymbol];\n      case TOKEN_ALPHABET_LOWERCASE_D_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_ALPHABET_LOWERCASE_D, tokenSymbol];\n      case TOKEN_ALPHABET_LOWERCASE_E_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_ALPHABET_LOWERCASE_E, tokenSymbol];\n      case TOKEN_ALPHABET_LOWERCASE_F_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_ALPHABET_LOWERCASE_F, tokenSymbol];\n      case TOKEN_ALPHABET_LOWERCASE_L_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_ALPHABET_LOWERCASE_L, tokenSymbol];\n      case TOKEN_ALPHABET_LOWERCASE_N_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_ALPHABET_LOWERCASE_N, tokenSymbol];\n      case TOKEN_ALPHABET_LOWERCASE_R_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_ALPHABET_LOWERCASE_R, tokenSymbol];\n      case TOKEN_ALPHABET_LOWERCASE_S_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_ALPHABET_LOWERCASE_S, tokenSymbol];\n      case TOKEN_ALPHABET_LOWERCASE_T_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_ALPHABET_LOWERCASE_T, tokenSymbol];\n      case TOKEN_ALPHABET_LOWERCASE_U_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_ALPHABET_LOWERCASE_U, tokenSymbol];\n      case TOKEN_ALPHABET_UPPERCASE_A_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_ALPHABET_UPPERCASE_A, tokenSymbol];\n      case TOKEN_ALPHABET_UPPERCASE_B_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_ALPHABET_UPPERCASE_B, tokenSymbol];\n      case TOKEN_ALPHABET_UPPERCASE_C_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_ALPHABET_UPPERCASE_C, tokenSymbol];\n      case TOKEN_ALPHABET_UPPERCASE_D_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_ALPHABET_UPPERCASE_D, tokenSymbol];\n      case TOKEN_ALPHABET_UPPERCASE_E_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_ALPHABET_UPPERCASE_E, tokenSymbol];\n      case TOKEN_ALPHABET_UPPERCASE_F_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_ALPHABET_UPPERCASE_F, tokenSymbol];\n      case TOKEN_NUMBER_0_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_NUMBER_0, tokenSymbol];\n      case TOKEN_NUMBER_1_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_NUMBER_1, tokenSymbol];\n      case TOKEN_NUMBER_2_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_NUMBER_2, tokenSymbol];\n      case TOKEN_NUMBER_3_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_NUMBER_3, tokenSymbol];\n      case TOKEN_NUMBER_4_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_NUMBER_4, tokenSymbol];\n      case TOKEN_NUMBER_5_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_NUMBER_5, tokenSymbol];\n      case TOKEN_NUMBER_6_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_NUMBER_6, tokenSymbol];\n      case TOKEN_NUMBER_7_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_NUMBER_7, tokenSymbol];\n      case TOKEN_NUMBER_8_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_NUMBER_8, tokenSymbol];\n      case TOKEN_NUMBER_9_SYMBOL:\n        this.skipJSONSegment(1);\n        return [TOKEN_NUMBER_9, tokenSymbol];\n      default:\n        this.skipJSONSegment(1);\n        return [TOKEN_OTHERS, tokenSymbol];\n    }\n  }\n\n  // append JSON string to current JSON stream content\n  // this method will traversal all token and generate mirror token for complete full JSON\n  AppendString(str) {\n    this.JSONSegment = str;\n    for (;;) {\n      let [token, tokenSymbol] = this.matchToken();\n\n      switch (token) {\n        case TOKEN_EOF:\n          // nothing to do with TOKEN_EOF\n          break;\n        case TOKEN_IGNORED:\n          if (this.streamStoppedInAString()) {\n            this.JSONContent += tokenSymbol;\n            continue;\n          }\n          this.pushByteIntoPaddingContent(tokenSymbol);\n          break;\n\n        case TOKEN_OTHERS:\n          // check if JSON stream stopped with padding content\n          if (this.havePaddingContent()) {\n            this.appendPaddingContentToJSONContent();\n            this.cleanPaddingContent();\n          }\n\n          // write current token symbol to JSON content\n          this.JSONContent += tokenSymbol;\n          break;\n\n        case TOKEN_LEFT_BRACKET:\n          // check if JSON stream stopped with padding content\n          if (this.havePaddingContent()) {\n            this.appendPaddingContentToJSONContent();\n            this.cleanPaddingContent();\n          }\n          this.JSONContent += tokenSymbol;\n          if (this.streamStoppedInAString()) {\n            continue;\n          }\n          this.pushTokenStack(token);\n          if (this.streamStoppedInAnObjectArrayValueStart()) {\n            // pop `n`, `u`, `l`, `l` from mirror stack\n            this.popMirrorTokenStack();\n            this.popMirrorTokenStack();\n            this.popMirrorTokenStack();\n            this.popMirrorTokenStack();\n          }\n\n          // push `]` into mirror stack\n          this.pushMirrorTokenStack(TOKEN_RIGHT_BRACKET);\n          break;\n\n        case TOKEN_RIGHT_BRACKET:\n          if (this.streamStoppedInAString()) {\n            this.JSONContent += tokenSymbol;\n            continue;\n          }\n\n          // check if JSON stream stopped with padding content\n          if (this.havePaddingContent()) {\n            this.appendPaddingContentToJSONContent();\n            this.cleanPaddingContent();\n          }\n\n          // write current token symbol to JSON content\n          this.JSONContent += tokenSymbol;\n\n          // push `]` into stack\n          this.pushTokenStack(token);\n          // pop `]` from mirror stack\n          this.popMirrorTokenStack();\n          break;\n\n        case TOKEN_LEFT_BRACE:\n          // check if JSON stream stopped with padding content\n          if (this.havePaddingContent()) {\n            this.appendPaddingContentToJSONContent();\n            this.cleanPaddingContent();\n          }\n\n          // write current token symbol to JSON content\n          this.JSONContent += tokenSymbol;\n\n          if (this.streamStoppedInAString()) {\n            continue;\n          }\n          this.pushTokenStack(token);\n\n          if (this.streamStoppedInAnObjectObjectValueStart()) {\n            // pop `n`, `u`, `l`, `l` from mirror stack\n            this.popMirrorTokenStack();\n            this.popMirrorTokenStack();\n            this.popMirrorTokenStack();\n            this.popMirrorTokenStack();\n          }\n\n          // push `}` into mirror stack\n          this.pushMirrorTokenStack(TOKEN_RIGHT_BRACE);\n          break;\n\n        case TOKEN_RIGHT_BRACE:\n          if (this.streamStoppedInAString()) {\n            this.JSONContent += tokenSymbol;\n            continue;\n          }\n\n          // check if JSON stream stopped with padding content\n          if (this.havePaddingContent()) {\n            this.appendPaddingContentToJSONContent();\n            this.cleanPaddingContent();\n          }\n          this.JSONContent += tokenSymbol;\n\n          // push `}` into stack\n          this.pushTokenStack(token);\n          // pop `}` from mirror stack\n          this.popMirrorTokenStack();\n          break;\n        case TOKEN_QUOTE:\n          // check if escape quote `\\\"`\n          if (this.streamStoppedWithLeadingEscapeCharacter()) {\n            // push padding escape character `\\` into JSON content\n            this.appendPaddingContentToJSONContent();\n            this.cleanPaddingContent();\n\n            // write current token symbol to JSON content\n            this.JSONContent += tokenSymbol;\n\n            // pop `\\` from stack\n            this.popTokenStack();\n            continue;\n          }\n\n          // check if json stream stopped with padding content\n          if (this.havePaddingContent()) {\n            this.appendPaddingContentToJSONContent();\n            this.cleanPaddingContent();\n          }\n\n          // write current token symbol to JSON content\n          this.JSONContent += tokenSymbol;\n          this.pushTokenStack(token);\n          if (this.streamStoppedInAnArray()) {\n            // push `\"` into mirror stack\n            this.pushMirrorTokenStack(TOKEN_QUOTE);\n          } else if (this.streamStoppedInAnArrayStringValueEnd()) {\n            // pop `\"` from mirror stack\n            this.popMirrorTokenStack();\n          } else if (this.streamStoppedInAnObjectKeyStart()) {\n            // push `\"`, `:`, `n`, `u`, `l`, `l` into mirror stack\n            this.pushMirrorTokenStack(TOKEN_ALPHABET_LOWERCASE_L);\n            this.pushMirrorTokenStack(TOKEN_ALPHABET_LOWERCASE_L);\n            this.pushMirrorTokenStack(TOKEN_ALPHABET_LOWERCASE_U);\n            this.pushMirrorTokenStack(TOKEN_ALPHABET_LOWERCASE_N);\n            this.pushMirrorTokenStack(TOKEN_COLON);\n            this.pushMirrorTokenStack(TOKEN_QUOTE);\n          } else if (this.streamStoppedInAnObjectKeyEnd()) {\n            // pop `\"` from mirror stack\n            this.popMirrorTokenStack();\n          } else if (this.streamStoppedInAnObjectStringValueStart()) {\n            // pop `n`, `u`, `l`, `l` from mirror stack\n            this.popMirrorTokenStack();\n            this.popMirrorTokenStack();\n            this.popMirrorTokenStack();\n            this.popMirrorTokenStack();\n            // push `\"` into mirror stack\n            this.pushMirrorTokenStack(TOKEN_QUOTE);\n          } else if (this.streamStoppedInAnObjectValueEnd()) {\n            // pop `\"` from mirror stack\n            this.popMirrorTokenStack();\n          } else {\n            throw new Error('invalid quote token in json stream');\n          }\n          break;\n        case TOKEN_COLON:\n          if (this.streamStoppedInAString()) {\n            this.JSONContent += tokenSymbol;\n            continue;\n          }\n\n          if (this.havePaddingContent()) {\n            this.appendPaddingContentToJSONContent();\n            this.cleanPaddingContent();\n          }\n\n          this.JSONContent += tokenSymbol;\n          this.pushTokenStack(token);\n          this.popMirrorTokenStack();\n          break;\n\n        case TOKEN_ALPHABET_LOWERCASE_A:\n          if (this.streamStoppedInAnStringUnicodeEscape()) {\n            this.pushByteIntoPaddingContent(tokenSymbol);\n            if (this.PaddingContent.length === 6) {\n              this.appendPaddingContentToJSONContent();\n              this.cleanPaddingContent();\n              this.popTokenStack();\n              this.popTokenStack();\n            }\n            continue;\n          }\n\n          this.JSONContent += tokenSymbol;\n\n          if (this.streamStoppedInAString()) {\n            continue;\n          }\n\n          this.itIsPartOfTokenFalse = () => {\n            var left = [TOKEN_ALPHABET_LOWERCASE_F];\n            var right = [\n              TOKEN_ALPHABET_LOWERCASE_E,\n              TOKEN_ALPHABET_LOWERCASE_S,\n              TOKEN_ALPHABET_LOWERCASE_L,\n              TOKEN_ALPHABET_LOWERCASE_A,\n            ];\n            return (\n              matchStack(this.TokenStack, left) &&\n              matchStack(this.MirrorTokenStack, right)\n            );\n          };\n\n          if (!this.itIsPartOfTokenFalse()) {\n            continue;\n          }\n\n          this.pushTokenStack(token);\n          this.popMirrorTokenStack();\n          break;\n        case TOKEN_ALPHABET_LOWERCASE_B:\n          // as hex in unicode\n          if (this.streamStoppedInAnStringUnicodeEscape()) {\n            this.pushByteIntoPaddingContent(tokenSymbol);\n\n            // check if unicode escape is full length\n            if (this.PaddingContent.length === 6) {\n              this.appendPaddingContentToJSONContent();\n              this.cleanPaddingContent();\n\n              // pop `\\`, `u` from stack\n              this.popTokenStack();\n              this.popTokenStack();\n            }\n            continue;\n          }\n\n          // \\b escape `\\`, `b`\n          if (this.streamStoppedWithLeadingEscapeCharacter()) {\n            // push padding escape character `\\` into JSON content\n            this.appendPaddingContentToJSONContent();\n            this.cleanPaddingContent();\n\n            // write current token symbol to JSON content\n            this.JSONContent += tokenSymbol;\n\n            // pop `\\` from  stack\n            this.popTokenStack();\n            continue;\n          }\n\n          // write current token symbol to JSON content\n          this.JSONContent += tokenSymbol;\n\n          // in a string, just skip token\n          if (this.streamStoppedInAString()) {\n            continue;\n          }\n          break;\n\n        case TOKEN_ALPHABET_LOWERCASE_E:\n          // as hex in unicode\n          if (this.streamStoppedInAnStringUnicodeEscape()) {\n            this.pushByteIntoPaddingContent(tokenSymbol);\n\n            // check if unicode escape is full length\n            if (this.PaddingContent.length === 6) {\n              this.appendPaddingContentToJSONContent();\n              this.cleanPaddingContent();\n\n              // pop `\\`, `u` from stack\n              this.popTokenStack();\n              this.popTokenStack();\n            }\n            continue;\n          }\n\n          // check if in a number, as `e` (exponent) in scientific notation\n          if (this.streamStoppedInANumberDecimalPartMiddle()) {\n            this.pushByteIntoPaddingContent(tokenSymbol);\n            continue;\n          }\n\n          // write current token symbol to JSON content\n          this.JSONContent += tokenSymbol;\n\n          // in a string, just skip token\n          if (this.streamStoppedInAString()) {\n            continue;\n          }\n          // Omitting boolean validation functions due to placeholder logic\n\n          this.pushTokenStack(token);\n          this.popMirrorTokenStack();\n          break;\n        case TOKEN_ALPHABET_LOWERCASE_F:\n          // as hex in unicode\n          if (this.streamStoppedInAnStringUnicodeEscape()) {\n            this.pushByteIntoPaddingContent(tokenSymbol);\n            // check if unicode escape is full length\n            if (this.PaddingContent.length === 6) {\n              this.appendPaddingContentToJSONContent();\n              this.cleanPaddingContent();\n              // pop `\\`, `u` from stack\n              this.popTokenStack();\n              this.popTokenStack();\n            }\n            continue;\n          }\n\n          // \\f escape `\\`, `f`\n          if (this.streamStoppedWithLeadingEscapeCharacter()) {\n            // push padding escape character `\\` into JSON content\n            this.appendPaddingContentToJSONContent();\n            this.cleanPaddingContent();\n\n            // write current token symbol to JSON content\n            this.JSONContent += tokenSymbol;\n\n            // pop `\\` from stack\n            this.popTokenStack();\n            continue;\n          }\n\n          // check if json stream stopped with padding content, like case `[true , f`\n          if (this.havePaddingContent()) {\n            this.appendPaddingContentToJSONContent();\n            this.cleanPaddingContent();\n          }\n\n          // write current token symbol to JSON content\n          this.JSONContent += tokenSymbol;\n\n          // in a string, just skip token\n          if (this.streamStoppedInAString()) {\n            continue;\n          }\n\n          // push `f` into stack\n          this.pushTokenStack(token);\n          if (this.streamStoppedInAnArray()) {\n            // in array\n            // push `a`, `l`, `s`, `e`\n            this.pushMirrorTokenStack(TOKEN_ALPHABET_LOWERCASE_E);\n            this.pushMirrorTokenStack(TOKEN_ALPHABET_LOWERCASE_S);\n            this.pushMirrorTokenStack(TOKEN_ALPHABET_LOWERCASE_L);\n            this.pushMirrorTokenStack(TOKEN_ALPHABET_LOWERCASE_A);\n          } else {\n            // in object\n            // pop `n`, `u`, `l`, `l`\n            this.popMirrorTokenStack();\n            this.popMirrorTokenStack();\n            this.popMirrorTokenStack();\n            this.popMirrorTokenStack();\n            // push `a`, `l`, `s`, `e`\n            this.pushMirrorTokenStack(TOKEN_ALPHABET_LOWERCASE_E);\n            this.pushMirrorTokenStack(TOKEN_ALPHABET_LOWERCASE_S);\n            this.pushMirrorTokenStack(TOKEN_ALPHABET_LOWERCASE_L);\n            this.pushMirrorTokenStack(TOKEN_ALPHABET_LOWERCASE_A);\n          }\n          break;\n        case TOKEN_ALPHABET_LOWERCASE_L:\n          // write current token symbol to JSON content\n          this.JSONContent += tokenSymbol;\n\n          // in a string, just skip token\n          if (this.streamStoppedInAString()) {\n            continue;\n          }\n\n          // helper functions to check stack states\n          this.itIsPartOfTokenFalse1 = () => {\n            const left = [\n              TOKEN_ALPHABET_LOWERCASE_F,\n              TOKEN_ALPHABET_LOWERCASE_A,\n            ];\n            const right = [\n              TOKEN_ALPHABET_LOWERCASE_E,\n              TOKEN_ALPHABET_LOWERCASE_S,\n              TOKEN_ALPHABET_LOWERCASE_L,\n            ];\n            return (\n              matchStack(this.TokenStack, left) &&\n              matchStack(this.MirrorTokenStack, right)\n            );\n          };\n\n          this.itIsPartOfTokenNull1 = () => {\n            const left = [\n              TOKEN_ALPHABET_LOWERCASE_N,\n              TOKEN_ALPHABET_LOWERCASE_U,\n            ];\n            const right = [\n              TOKEN_ALPHABET_LOWERCASE_L,\n              TOKEN_ALPHABET_LOWERCASE_L,\n            ];\n            return (\n              matchStack(this.TokenStack, left) &&\n              matchStack(this.MirrorTokenStack, right)\n            );\n          };\n\n          this.itIsPartOfTokenNull2 = () => {\n            const left = [\n              TOKEN_ALPHABET_LOWERCASE_N,\n              TOKEN_ALPHABET_LOWERCASE_U,\n              TOKEN_ALPHABET_LOWERCASE_L,\n            ];\n            const right = [TOKEN_ALPHABET_LOWERCASE_L];\n            return (\n              matchStack(this.TokenStack, left) &&\n              matchStack(this.MirrorTokenStack, right)\n            );\n          };\n\n          if (\n            !this.itIsPartOfTokenFalse1() &&\n            !this.itIsPartOfTokenNull1() &&\n            !this.itIsPartOfTokenNull2()\n          ) {\n            continue;\n          }\n\n          this.pushTokenStack(token);\n          this.popMirrorTokenStack();\n          break;\n        case TOKEN_ALPHABET_LOWERCASE_N:\n          // \\n escape `\\`, `n`\n          if (this.streamStoppedWithLeadingEscapeCharacter()) {\n            // Push padding escape character `\\` into JSON content\n            this.appendPaddingContentToJSONContent();\n            this.cleanPaddingContent();\n\n            // Write current token symbol to JSON content\n            this.JSONContent += tokenSymbol;\n\n            // Pop `\\` from stack\n            this.popTokenStack();\n            continue;\n          }\n\n          // Check if JSON stream stopped with padding content, like case `[true, n`\n          if (this.havePaddingContent()) {\n            this.appendPaddingContentToJSONContent();\n            this.cleanPaddingContent();\n          }\n\n          // Write current token symbol to JSON content\n          this.JSONContent += tokenSymbol;\n\n          // In a string, just skip token\n          if (this.streamStoppedInAString()) {\n            continue;\n          }\n\n          // Push `n`\n          this.pushTokenStack(token);\n          if (this.streamStoppedInAnArray()) {\n            // In array, push `u`, `l`, `l`\n            this.pushMirrorTokenStack(TOKEN_ALPHABET_LOWERCASE_L);\n            this.pushMirrorTokenStack(TOKEN_ALPHABET_LOWERCASE_L);\n            this.pushMirrorTokenStack(TOKEN_ALPHABET_LOWERCASE_U);\n          } else {\n            // In object, pop `n`\n            this.popMirrorTokenStack();\n          }\n          break;\n        case TOKEN_ALPHABET_LOWERCASE_R:\n          // \\r escape `\\`, `r`\n          if (this.streamStoppedWithLeadingEscapeCharacter()) {\n            // push padding escape character `\\` into JSON content\n            this.appendPaddingContentToJSONContent();\n            this.cleanPaddingContent();\n\n            // write current token symbol to JSON content\n            this.JSONContent += tokenSymbol;\n\n            // pop `\\` from stack\n            this.popTokenStack();\n            continue;\n          }\n\n          // write current token symbol to JSON content\n          this.JSONContent += tokenSymbol;\n\n          // in a string, just skip token\n          if (this.streamStoppedInAString()) {\n            continue;\n          }\n\n          // check if `t` in token stack and `r`, `u`, `e` in mirror stack\n          this.itIsPartOfTokenTrue = () => {\n            const left = [TOKEN_ALPHABET_LOWERCASE_T];\n            const right = [\n              TOKEN_ALPHABET_LOWERCASE_E,\n              TOKEN_ALPHABET_LOWERCASE_U,\n              TOKEN_ALPHABET_LOWERCASE_R,\n            ];\n            return (\n              matchStack(this.TokenStack, left) &&\n              matchStack(this.MirrorTokenStack, right)\n            );\n          };\n\n          if (!this.itIsPartOfTokenTrue()) {\n            continue;\n          }\n\n          this.pushTokenStack(token);\n          this.popMirrorTokenStack();\n          break;\n        case TOKEN_ALPHABET_LOWERCASE_S:\n          // write current token symbol to JSON content\n          this.JSONContent += tokenSymbol;\n\n          // in a string, just skip token\n          if (this.streamStoppedInAString()) {\n            continue;\n          }\n\n          // check if `f`, `a`, `l` in token stack and `s`, `e in mirror stack\n          this.itIsPartOfTokenFalse2 = () => {\n            let left = [\n              TOKEN_ALPHABET_LOWERCASE_F,\n              TOKEN_ALPHABET_LOWERCASE_A,\n              TOKEN_ALPHABET_LOWERCASE_L,\n            ];\n            let right = [\n              TOKEN_ALPHABET_LOWERCASE_E,\n              TOKEN_ALPHABET_LOWERCASE_S,\n            ];\n            return (\n              matchStack(this.TokenStack, left) &&\n              matchStack(this.MirrorTokenStack, right)\n            );\n          };\n          if (!this.itIsPartOfTokenFalse2()) {\n            continue;\n          }\n          this.pushTokenStack(token);\n          this.popMirrorTokenStack();\n          break;\n        case TOKEN_ALPHABET_LOWERCASE_T:\n          // \\t escape `\\`, `t`\n          if (this.streamStoppedWithLeadingEscapeCharacter()) {\n            // push padding escape character `\\` into JSON content\n            this.appendPaddingContentToJSONContent();\n            this.cleanPaddingContent();\n\n            // write current token symbol to JSON content\n            this.JSONContent += tokenSymbol;\n\n            // pop `\\` from stack\n            this.popTokenStack();\n            continue;\n          }\n\n          // check if json stream stopped with padding content, like case `[true , t`\n          if (this.havePaddingContent()) {\n            this.appendPaddingContentToJSONContent();\n            this.cleanPaddingContent();\n          }\n\n          // write current token symbol to JSON content\n          this.JSONContent += tokenSymbol;\n\n          // in a string, just skip token\n          if (this.streamStoppedInAString()) {\n            continue;\n          }\n\n          // push `t` to stack\n          this.pushTokenStack(token);\n          if (this.streamStoppedInAnArray()) {\n            // in array\n            // push `r`, `u`, `e`\n            this.pushMirrorTokenStack(TOKEN_ALPHABET_LOWERCASE_E);\n            this.pushMirrorTokenStack(TOKEN_ALPHABET_LOWERCASE_U);\n            this.pushMirrorTokenStack(TOKEN_ALPHABET_LOWERCASE_R);\n          } else {\n            // in object\n            // pop `n`, `u`, `l`, `l`\n            this.popMirrorTokenStack();\n            this.popMirrorTokenStack();\n            this.popMirrorTokenStack();\n            this.popMirrorTokenStack();\n            // push `r`, `u`, `e`\n            this.pushMirrorTokenStack(TOKEN_ALPHABET_LOWERCASE_E);\n            this.pushMirrorTokenStack(TOKEN_ALPHABET_LOWERCASE_U);\n            this.pushMirrorTokenStack(TOKEN_ALPHABET_LOWERCASE_R);\n          }\n          break;\n        case TOKEN_ALPHABET_LOWERCASE_U:\n          // unicode escape `\\`, `u`\n          if (this.streamStoppedWithLeadingEscapeCharacter()) {\n            this.pushTokenStack(token);\n            this.PaddingContent += tokenSymbol;\n            continue;\n          }\n\n          // write current token symbol to JSON content\n          this.JSONContent += tokenSymbol;\n\n          // in a string, just skip token\n          if (this.streamStoppedInAString()) {\n            continue;\n          }\n\n          // check if `t`, `r` in token stack and, `u`, `e` in mirror stack\n          this.itIsPartOfTokenTrue2 = () => {\n            const left = [\n              TOKEN_ALPHABET_LOWERCASE_T,\n              TOKEN_ALPHABET_LOWERCASE_R,\n            ];\n            const right = [\n              TOKEN_ALPHABET_LOWERCASE_E,\n              TOKEN_ALPHABET_LOWERCASE_U,\n            ];\n            return (\n              matchStack(this.TokenStack, left) &&\n              matchStack(this.MirrorTokenStack, right)\n            );\n          };\n\n          // check if `n` in token stack and `u`, `l`, `l` in mirror stack\n          this.itIsPartOfTokenNull = () => {\n            const left = [TOKEN_ALPHABET_LOWERCASE_N];\n            const right = [\n              TOKEN_ALPHABET_LOWERCASE_L,\n              TOKEN_ALPHABET_LOWERCASE_L,\n              TOKEN_ALPHABET_LOWERCASE_U,\n            ];\n            return (\n              matchStack(this.TokenStack, left) &&\n              matchStack(this.MirrorTokenStack, right)\n            );\n          };\n          if (!this.itIsPartOfTokenTrue2() && !this.itIsPartOfTokenNull()) {\n            continue;\n          }\n          this.pushTokenStack(token);\n          this.popMirrorTokenStack();\n          break;\n        case TOKEN_ALPHABET_UPPERCASE_A:\n        case TOKEN_ALPHABET_UPPERCASE_B:\n        case TOKEN_ALPHABET_UPPERCASE_C:\n        case TOKEN_ALPHABET_UPPERCASE_D:\n        case TOKEN_ALPHABET_LOWERCASE_C:\n        case TOKEN_ALPHABET_LOWERCASE_D:\n        case TOKEN_ALPHABET_UPPERCASE_F:\n          // as hex in unicode\n          if (this.streamStoppedInAnStringUnicodeEscape()) {\n            this.pushByteIntoPaddingContent(tokenSymbol);\n            // check if unicode escape is full length\n            if (this.PaddingContent.length === 6) {\n              this.appendPaddingContentToJSONContent();\n              this.cleanPaddingContent();\n              // pop `\\`, `u` from stack\n              this.popTokenStack();\n              this.popTokenStack();\n            }\n            continue;\n          }\n\n          // write current token symbol to JSON content\n          this.JSONContent += tokenSymbol;\n\n          // in a string, just skip token\n          if (this.streamStoppedInAString()) {\n            continue;\n          }\n          break;\n        case TOKEN_ALPHABET_UPPERCASE_E:\n          // as hex in unicode\n          if (this.streamStoppedInAnStringUnicodeEscape()) {\n            this.pushByteIntoPaddingContent(tokenSymbol);\n            // check if unicode escape is full length\n            if (this.PaddingContent.length === 6) {\n              this.appendPaddingContentToJSONContent();\n              this.cleanPaddingContent();\n              // pop `\\`, `u` from stack\n              this.popTokenStack();\n              this.popTokenStack();\n            }\n            continue;\n          }\n\n          // check if in a number, as `E` (exponent) in scientific notation\n          if (this.streamStoppedInANumberDecimalPartMiddle()) {\n            this.pushByteIntoPaddingContent(tokenSymbol);\n            continue;\n          }\n\n          // write current token symbol to JSON content\n          this.JSONContent += tokenSymbol;\n\n          // in a string, just skip token\n          if (this.streamStoppedInAString()) {\n            continue;\n          }\n          break;\n        case TOKEN_NUMBER_0:\n        case TOKEN_NUMBER_1:\n        case TOKEN_NUMBER_2:\n        case TOKEN_NUMBER_3:\n        case TOKEN_NUMBER_4:\n        case TOKEN_NUMBER_5:\n        case TOKEN_NUMBER_6:\n        case TOKEN_NUMBER_7:\n        case TOKEN_NUMBER_8:\n        case TOKEN_NUMBER_9:\n          if (this.streamStoppedInAnStringUnicodeEscape()) {\n            this.pushByteIntoPaddingContent(tokenSymbol);\n            // check if unicode escape is full length\n            if (this.PaddingContent.length === 6) {\n              this.appendPaddingContentToJSONContent();\n              this.cleanPaddingContent();\n              // pop `\\`, `u` from stack\n              this.popTokenStack();\n              this.popTokenStack();\n            }\n            continue;\n          }\n\n          // check if json stream stopped with padding content, like `[1 , 1`\n          if (this.havePaddingContent()) {\n            this.appendPaddingContentToJSONContent();\n            this.cleanPaddingContent();\n          }\n\n          // in negative part of a number\n          if (this.streamStoppedInANegativeNumberValueStart()) {\n            this.pushNegativeIntoJSONContent();\n            // pop `0` from mirror stack\n            this.popMirrorTokenStack();\n          }\n\n          // write current token symbol to JSON content\n          this.JSONContent += tokenSymbol;\n\n          // in a string or a number, just skip token\n          if (this.streamStoppedInAString() || this.streamStoppedInANumber()) {\n            continue;\n          }\n\n          // in decimal part of a number\n          if (this.streamStoppedInANumberDecimalPart()) {\n            this.pushTokenStack(TOKEN_NUMBER);\n            // pop placeholder `0` in decimal part\n            this.popMirrorTokenStack();\n            continue;\n          }\n\n          // first number type token, push token into stack\n          this.pushTokenStack(TOKEN_NUMBER);\n\n          // check if we are in an object or an array\n          if (this.streamStoppedInAnArray()) {\n            continue;\n          } else if (this.streamStoppedInAnObjectNullValuePlaceholderStart()) {\n            // pop `n`, `u`, `l`, `l`\n            this.popMirrorTokenStack();\n            this.popMirrorTokenStack();\n            this.popMirrorTokenStack();\n            this.popMirrorTokenStack();\n          }\n          break;\n        case TOKEN_COMMA:\n          // in a string, just skip token\n          if (this.streamStoppedInAString()) {\n            this.JSONContent += tokenSymbol;\n            continue;\n          }\n          // in a object or a array, keep the comma in stack but not write it into JSONContent, until next token arrival\n          this.pushByteIntoPaddingContent(tokenSymbol);\n          this.pushTokenStack(token);\n          break;\n        case TOKEN_DOT:\n          // write current token symbol to JSON content\n          this.JSONContent += tokenSymbol;\n\n          // in a string, just skip token\n          if (this.streamStoppedInAString()) {\n            continue;\n          }\n\n          // use 0 for decimal part placeholder\n          this.pushTokenStack(token);\n          this.pushMirrorTokenStack(TOKEN_NUMBER_0);\n          break;\n        case TOKEN_SLASH:\n          // escape character `\\`, `/`\n          if (this.streamStoppedWithLeadingEscapeCharacter()) {\n            // push padding escape character `\\` into JSON content\n            this.appendPaddingContentToJSONContent();\n            this.cleanPaddingContent();\n\n            // write current token symbol to JSON content\n            this.JSONContent += tokenSymbol;\n\n            // pop `\\` from stack\n            this.popTokenStack();\n            continue;\n          } else if (this.streamStoppedInAString()) {\n            this.JSONContent += tokenSymbol;\n            continue;\n          }\n          break;\n        case TOKEN_ESCAPE_CHARACTER: // TOKEN_ESCAPE_CHARACTER needs to be defined somewhere\n          // double escape character `\\`, `\\`\n          if (this.streamStoppedWithLeadingEscapeCharacter()) {\n            // push padding escape character `\\` into JSON content\n            this.appendPaddingContentToJSONContent();\n            this.cleanPaddingContent();\n\n            // write current token symbol to JSON content\n            this.JSONContent += tokenSymbol;\n\n            // pop `\\` from stack\n            this.popTokenStack();\n            continue;\n          }\n\n          // just write escape character into stack and waiting other token trigger escape method.\n          this.pushTokenStack(token);\n          this.pushByteIntoPaddingContent(TOKEN_ESCAPE_CHARACTER_SYMBOL); // TOKEN_ESCAPE_CHARACTER_SYMBOL needs to be defined somewhere\n          break;\n        case TOKEN_NEGATIVE: // TOKEN_NEGATIVE needs to be defined somewhere\n          // in a string, just skip token\n          if (this.streamStoppedInAString()) {\n            this.JSONContent += tokenSymbol;\n            continue;\n          }\n\n          // check if JSON stream stopped with padding content, like `[1 , -`\n          if (this.havePaddingContent()) {\n            this.appendPaddingContentToJSONContent();\n            this.cleanPaddingContent();\n          }\n\n          // just write negative character into stack and wait for other token to trigger it.\n          this.pushTokenStack(token);\n          if (this.streamStoppedInAnObjectNegativeNumberValueStart()) {\n            // pop `n`, `u`, `l`, `l` from mirror stack\n            for (let i = 0; i < 4; i++) {\n              // assuming \"null\" has been pushed into the stack as separate characters\n              this.popMirrorTokenStack();\n            }\n          }\n\n          // push `0` into mirror stack for placeholder\n          this.pushMirrorTokenStack(TOKEN_NUMBER_0); // TOKEN_NUMBER_0 needs to be defined somewhere\n          break;\n        default:\n          throw new Error(\n            `unexpected token: \\`${token}\\`, token symbol: \\`${tokenSymbol}\\``,\n          );\n      }\n\n      // check if end\n      if (token === TOKEN_EOF) {\n        break;\n      }\n    }\n  }\n\n  // Complete the incomplete JSON string by concat JSON content and mirror tokens\n  CompleteJSON() {\n    return this.JSONContent + this.dumpMirrorTokenStackToString(); // Assuming an implementation of dumpMirrorTokenStackToString\n  }\n}\n\nexport { Lexer };\n"],"names":["TOKEN_EOF","TOKEN_IGNORED","TOKEN_LEFT_BRACKET","TOKEN_RIGHT_BRACKET","TOKEN_LEFT_BRACE","TOKEN_RIGHT_BRACE","TOKEN_COLON","TOKEN_DOT","TOKEN_COMMA","TOKEN_QUOTE","TOKEN_ESCAPE_CHARACTER","TOKEN_SLASH","TOKEN_NEGATIVE","TOKEN_NULL","TOKEN_TRUE","TOKEN_FALSE","TOKEN_ALPHABET_LOWERCASE_A","TOKEN_ALPHABET_LOWERCASE_B","TOKEN_ALPHABET_LOWERCASE_C","TOKEN_ALPHABET_LOWERCASE_D","TOKEN_ALPHABET_LOWERCASE_E","TOKEN_ALPHABET_LOWERCASE_F","TOKEN_ALPHABET_LOWERCASE_L","TOKEN_ALPHABET_LOWERCASE_N","TOKEN_ALPHABET_LOWERCASE_R","TOKEN_ALPHABET_LOWERCASE_S","TOKEN_ALPHABET_LOWERCASE_T","TOKEN_ALPHABET_LOWERCASE_U","TOKEN_ALPHABET_UPPERCASE_A","TOKEN_ALPHABET_UPPERCASE_B","TOKEN_ALPHABET_UPPERCASE_C","TOKEN_ALPHABET_UPPERCASE_D","TOKEN_ALPHABET_UPPERCASE_E","TOKEN_ALPHABET_UPPERCASE_F","TOKEN_NUMBER","TOKEN_NUMBER_0","TOKEN_NUMBER_1","TOKEN_NUMBER_2","TOKEN_NUMBER_3","TOKEN_NUMBER_4","TOKEN_NUMBER_5","TOKEN_NUMBER_6","TOKEN_NUMBER_7","TOKEN_NUMBER_8","TOKEN_NUMBER_9","TOKEN_OTHERS","TOKEN_EOF_SYMBOL","TOKEN_LEFT_BRACKET_SYMBOL","TOKEN_RIGHT_BRACKET_SYMBOL","TOKEN_LEFT_BRACE_SYMBOL","TOKEN_RIGHT_BRACE_SYMBOL","TOKEN_COLON_SYMBOL","TOKEN_DOT_SYMBOL","TOKEN_COMMA_SYMBOL","TOKEN_QUOTE_SYMBOL","TOKEN_ESCAPE_CHARACTER_SYMBOL","TOKEN_SLASH_SYMBOL","TOKEN_NEGATIVE_SYMBOL","TOKEN_NULL_SYMBOL","TOKEN_TRUE_SYMBOL","TOKEN_FALSE_SYMBOL","TOKEN_ALPHABET_LOWERCASE_A_SYMBOL","TOKEN_ALPHABET_LOWERCASE_B_SYMBOL","TOKEN_ALPHABET_LOWERCASE_C_SYMBOL","TOKEN_ALPHABET_LOWERCASE_D_SYMBOL","TOKEN_ALPHABET_LOWERCASE_E_SYMBOL","TOKEN_ALPHABET_LOWERCASE_F_SYMBOL","TOKEN_ALPHABET_LOWERCASE_L_SYMBOL","TOKEN_ALPHABET_LOWERCASE_N_SYMBOL","TOKEN_ALPHABET_LOWERCASE_R_SYMBOL","TOKEN_ALPHABET_LOWERCASE_S_SYMBOL","TOKEN_ALPHABET_LOWERCASE_T_SYMBOL","TOKEN_ALPHABET_LOWERCASE_U_SYMBOL","TOKEN_ALPHABET_UPPERCASE_A_SYMBOL","TOKEN_ALPHABET_UPPERCASE_B_SYMBOL","TOKEN_ALPHABET_UPPERCASE_C_SYMBOL","TOKEN_ALPHABET_UPPERCASE_D_SYMBOL","TOKEN_ALPHABET_UPPERCASE_E_SYMBOL","TOKEN_ALPHABET_UPPERCASE_F_SYMBOL","TOKEN_NUMBER_0_SYMBOL","TOKEN_NUMBER_1_SYMBOL","TOKEN_NUMBER_2_SYMBOL","TOKEN_NUMBER_3_SYMBOL","TOKEN_NUMBER_4_SYMBOL","TOKEN_NUMBER_5_SYMBOL","TOKEN_NUMBER_6_SYMBOL","TOKEN_NUMBER_7_SYMBOL","TOKEN_NUMBER_8_SYMBOL","TOKEN_NUMBER_9_SYMBOL","TOKEN_SYMBOL_MAP","_TOKEN_SYMBOL_MAP","_defineProperty","isIgnoreToken","c","arrayLength","a","_context","_filterInstanceProperty","_Object$keys","call","el","Math","pow","length","matchStack","stack","tokens","pointer","tokensLeft","Lexer","_classCallCheck","JSONContent","PaddingContent","JSONSegment","TokenStack","MirrorTokenStack","_createClass","key","value","getTopTokenOnStack","getTopTokenOnMirrorStack","popTokenStack","pop","popMirrorTokenStack","pushTokenStack","token","push","pushMirrorTokenStack","dumpMirrorTokenStackToString","_context2","_context3","_context4","ret","_forEachInstanceProperty","_reverseInstanceProperty","_sliceInstanceProperty","item","skipJSONSegment","n","substring","pushNegativeIntoJSONContent","pushByteIntoPaddingContent","s","appendPaddingContentToJSONContent","havePaddingContent","cleanPaddingContent","streamStoppedInAnObjectKeyStart","case1","case2","case3","streamStoppedInAnObjectKeyEnd","streamStoppedInAnObjectStringValueStart","streamStoppedInAnObjectValueEnd","streamStoppedInAnObjectArrayValueStart","streamStoppedInAnObjectObjectValueStart","streamStoppedInAnObjectNegativeNumberValueStart","streamStoppedInANegativeNumberValueStart","streamStoppedInAnArray","streamStoppedInAnArrayStringValueEnd","streamStoppedInAnObjectNullValuePlaceholderStart","streamStoppedInAString","streamStoppedInAnStringUnicodeEscape","streamStoppedInANumber","streamStoppedInANumberDecimalPart","streamStoppedInANumberDecimalPartMiddle","streamStoppedWithLeadingEscapeCharacter","matchToken","tokenSymbol","AppendString","str","_this","_context5","_this$matchToken","_this$matchToken2","_slicedToArray","Error","itIsPartOfTokenFalse","left","right","itIsPartOfTokenFalse1","itIsPartOfTokenNull1","itIsPartOfTokenNull2","itIsPartOfTokenTrue","itIsPartOfTokenFalse2","itIsPartOfTokenTrue2","itIsPartOfTokenNull","i","_concatInstanceProperty","concat","CompleteJSON"],"mappings":"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"}